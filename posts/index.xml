<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Troy Hamilton</title>
        <link>https://troyhamilton.cloud/posts/</link>
        <description>Recent content in Posts on Troy Hamilton</description>
        <generator>Hugo -- gohugo.io</generator>
        <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
        <lastBuildDate>Sun, 23 Feb 2020 20:47:57 -0500</lastBuildDate>
        <atom:link href="https://troyhamilton.cloud/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Not your typical AA meeting, hanging out with Ansible and AWS</title>
            <link>https://troyhamilton.cloud/posts/2020/02/not-your-typical-aa-meeting-hanging-out-with-ansible-and-aws/</link>
            <pubDate>Sun, 23 Feb 2020 20:47:57 -0500</pubDate>
            
            <guid>https://troyhamilton.cloud/posts/2020/02/not-your-typical-aa-meeting-hanging-out-with-ansible-and-aws/</guid>
            <description>Coming soon :)</description>
            <content type="html"><![CDATA[<p>Coming soon :)</p>
]]></content>
        </item>
        
        <item>
            <title>This post is brought to you by the letters NSA</title>
            <link>https://troyhamilton.cloud/posts/2020/02/this-post-is-brought-to-you-by-the-letters-nsa/</link>
            <pubDate>Sun, 16 Feb 2020 10:36:53 -0500</pubDate>
            
            <guid>https://troyhamilton.cloud/posts/2020/02/this-post-is-brought-to-you-by-the-letters-nsa/</guid>
            <description>In 1997 I recall my VB6 college professor Mr. Shroff asked us to name a programming language. At the time I was studying for my AA in Electronic Engineering but I was also working at CompUSA which is probably the best job I ever had. It was the catalyst for me into IT. Anyway, Mr. Shroff looks at me, asks me to name a language, and after a brief moment I remember chatting with Brandon at the upgrades counter at work and his new jump on Python.</description>
            <content type="html"><![CDATA[<p>In 1997 I recall my VB6 college professor <a href="https://www.absolutedental.com/doctor/sulabh-shroff/">Mr. Shroff</a> asked us to name a programming language.  At the time I was studying for my AA in Electronic Engineering but I was also working at CompUSA which is probably the best job I ever had.  It was the catalyst for me into IT.  Anyway, Mr. Shroff looks at me, asks me to name a language, and after a brief moment I remember chatting with Brandon at the upgrades counter at work and his new jump on Python.  &lsquo;Great language, very powerful&rsquo; he exclaims and my dumbass should&rsquo;ve picked up on that.  But hey VB6 wasn&rsquo;t all that bad right?  Alas, here we are.</p>
<p>If you haven&rsquo;t seen it yet, thanks to a FOIA submitted by <a href="https://twitter.com/chris_swenson/status/1225836060938125313">@chris_swenson</a>, the NSA has unclassified it&rsquo;s COMP3321 course on Python.  Thanks Chris!</p>
<p>The ocr&rsquo;d pdf is 395 pages of 30+ lessons or sections.  The material is designed to be covered in a 2 week period if the user allots themselves about an hour per lesson.  Barring any interruptions, I hope to complete it by the end of February with week 1 starting today.</p>
<p>This post should be read in the context of me just chatting with someone at the bar about the course and not actually teaching about Python or programming.  However, if you&rsquo;re new to programming and have somehow fumbled your way into my cozy little spot here then please listen to me when I say, learn Python!  Trust me, it will open many doors for you.</p>
<p>Moving on!</p>
<p>Here&rsquo;s the breakdown for Week 1:</p>
<ul>
<li>Lesson 01: Intro to Python</li>
<li>Lesson 02: Variables and Functions</li>
<li>Lesson 03: Flow Control</li>
<li>Lesson 04: Container Data Types</li>
<li>Lesson 05: File Input and Output</li>
<li>Lesson 06: Development Environment and Tooling</li>
<li>Lesson 07: Object Orienteering: Using Classes</li>
<li>Lesson 08: Modules, Namespaces, and Packages</li>
<li>Lesson 09: Exceptions, Profiling, and Testing</li>
<li>Lesson 10: Iterators, Generators, and Duck Typing</li>
<li>Lesson 11: String Formatting</li>
</ul>
<p>As with most Python tutorials, Week 1 begins with an introduction which calls for an installation of <a href="https://www.anaconda.com/distribution/">Anaconda</a>, specifically version 4.4.0.  Anaconda is one of the largest Python distributions that give you access to all the libraries, dependencies, packages, and environments that you&rsquo;ll need for this lesson and probably any project a beginner would be involved in.</p>
<hr>
<h1 id="lesson01---intro">Lesson01 - Intro</h1>
<p>So what&rsquo;s covered in Lesson 01?  It starts off with &lsquo;Basic Basics: Data and Operations&rsquo; and explaining basic data types such as integers, floats, complexes, strings, and booleans.  We perform data operations against data types with operators, functions, and methods.</p>
<p>I like how they make a distinction between functions and methods:</p>
<blockquote>
<p>Functions: operations that take one or more pieces of data as arguments e.g. <code>type('hello')</code>, <code>len('world')</code>
Methods: attached to a piece of data and called from it using a . to seperate the data from the method e.g. <code>'Hello World'.split()</code> or <code>'abc'.upper()</code>.</p>
</blockquote>
<p>In C#, it is more common to use methods for both concepts e.g. <code>PrintResults(result);</code>, <code>result.ToString();</code>.</p>
<p>Using a split terminal in vscode you can navigate through intro stuff rather quickly.</p>
<p><img src="/images/vscode-python-split-terminal.png" alt="split terminal"></p>
<p>Moving on we read about a few built in functions:</p>
<ul>
<li><code>help(x)</code></li>
<li><code>dir(x)</code></li>
<li><code>type(x)</code></li>
<li><code>print</code></li>
<li><code>hasattr(a,b)</code></li>
<li><code>getattr</code></li>
<li><code>id</code></li>
<li><code>input</code></li>
</ul>
<p>Followed up with other fuctions that only work with number and string types:</p>
<ul>
<li><code>abs</code>, <code>round</code>, <code>float</code>, <code>max</code>, <code>min</code>, <code>pow</code>, <code>chr</code>, <code>divmod</code></li>
<li><code>&lt;&lt;</code>, <code>&gt;&gt;</code>, <code>&amp;</code>, <code>|</code>, <code>^</code>, <code>~</code></li>
<li><code>len</code>, <code>min</code>, <code>max</code>, <code>ord</code></li>
<li><code>+</code>, <code>*</code>, <code>in</code></li>
<li><code>strip</code>, <code>split</code>, <code>startswith</code>, <code>upper</code>, <code>find</code>, <code>index</code></li>
</ul>
<hr>
<h1 id="lesson02---variables-and-functions">Lesson02 - Variables and Functions</h1>
<p>Here come the variables!  Very useful stuff here like:</p>
<ul>
<li>Finding current variables in use with <code>dir()</code></li>
<li>Type checking with <code>isinstance()</code></li>
<li>Conversions like <code>a = &quot;3.14&quot; b = float(a) type (b)</code></li>
<li>A brief example for an array but apparently they&rsquo;re called containers in Python <code>l = [&quot;one&quot;, &quot;two&quot;, &quot;three&quot;, &quot;four&quot;]</code></li>
</ul>
<p>Where lesson02 shines is talking about making your own functions.</p>
<pre><code>def first_func(x):
      return x*2

first_func(10)
first_func('hello')
</code></pre><p><img src="/images/python-idle.png" alt="python idle"></p>
<p>Gotta love a little bit of enthusiasm here from the NSA:</p>
<blockquote>
<p>Wow&hellip; Python REALLY does not care about types.  Here is the simplest function that you can write in Python (no imput, no output, and mot much else!)</p>
</blockquote>
<pre><code>def simple():
      pass
</code></pre><hr>
<h1 id="lesson03---flow-control">Lesson03 - Flow Control</h1>
<p>Flow control is in every programming language.</p>
<p>A quick if statement:</p>
<pre><code>def even(n):
  if (type(n) != int):
    print('Only numbers please bro')
  elif (n % 2 == 0):
    print('Even!')
  else:
    print('Not even!')
</code></pre><p>A while loop:</p>
<pre><code>i = 0

while (i &lt;= 20):
  print(i)
  i += 1 /**No use of i++?**/
</code></pre><p>Don&rsquo;t forget about break and continue!</p>
<pre><code>i = 0

while(True):
  i += 1
  print(i)
  if (i == 10):
    print(&quot;I'm a 10&quot;)
    continue
  print(i)
  if (i == 20):
    break
</code></pre><p>Some for loop action:</p>
<pre><code>for i in [1,2,3,4,5,'a','b','c']:
  print(i)
</code></pre><hr>
<h1 id="lesson04---container-data-types">Lesson04 - Container Data Types</h1>
<p>This isn&rsquo;t a generic lesson.  Or is it?  Some of the containers discussed here are list, tuple, dict, set, frozenset.</p>
<p>Starting out the containers is the list():</p>
<pre><code>stuff = ['spam', 'eggs',5,3.2,[100,200,300]]
</code></pre><p>Containers have several methods at their disposal like append, insert, extend, remove</p>
<pre><code>stuff.append('cherry')
</code></pre>]]></content>
        </item>
        
        <item>
            <title>When in doubt, check your routes</title>
            <link>https://troyhamilton.cloud/posts/2020/02/when-in-doubt-check-your-routes/</link>
            <pubDate>Sat, 01 Feb 2020 07:54:43 -0500</pubDate>
            
            <guid>https://troyhamilton.cloud/posts/2020/02/when-in-doubt-check-your-routes/</guid>
            <description>One of the cool things you can do when launching aws ec2 instances is add a configuration script that will run during launch. From the launch configuration wizard, this script is on the &amp;lsquo;Configure Instance Details&amp;rsquo; step under &amp;lsquo;Advanced Details&amp;rsquo;. A common script that I&amp;rsquo;ve been using lately with all of my labs is installing, starting, and enabling the apache web server aka httpd.
#!/bin/bash sudo yum update -y sudo yum install -y httpd php sudo systemctl start httpd sudo systemctl enable httpd This is just a batch script that will update yum, install apache and php, start the httpd daemon and enable it to start on next boot.</description>
            <content type="html"><![CDATA[<p>One of the cool things you can do when launching aws ec2 instances is add a configuration script that will run during launch.  From the launch configuration wizard, this script is on the &lsquo;Configure Instance Details&rsquo; step under &lsquo;Advanced Details&rsquo;.  A common script that I&rsquo;ve been using lately with all of my labs is installing, starting, and enabling the apache web server aka httpd.</p>
<p><img src="/images/ec2-user-data-section.png" alt="user data"></p>
<pre><code>#!/bin/bash
sudo yum update -y
sudo yum install -y httpd php
sudo systemctl start httpd
sudo systemctl enable httpd
</code></pre><p>This is just a batch script that will update yum, install apache and php, start the httpd daemon and enable it to start on next boot.  I&rsquo;ve probably done it a hundred times by now&hellip;</p>
<p>So I&rsquo;m getting ready to test an application load balancer lab that I&rsquo;ve been working on but the default apache site for my bastion host isn&rsquo;t working.</p>
<p>First let&rsquo;s check to make sure the service is running</p>
<pre><code>ec2-user@ip-10-0-1-13 ~$ service httpd status
Redirecting to /bin/systemctl status httpd.service
Unit httpd.service could not be found.
</code></pre><p>Say what now?
But the stuff.  And the things.</p>
<p>The logs for the ec2 launch can be found in /var/log/cloud-init.log so let&rsquo;s check it out.</p>
<pre><code>[ec2-user@ip-10-0-1-13 log]$ sudo less cloud-init-output.log

Feb 08 22:17:28 cloud-init[3070]: __init__.py[WARNING]: Unhandled non-multipart (text/x-not-multipart) userdata: 'sudo yum update -y...'
Cloud-init v. 18.5-2.amzn2 running 'modules:config' at Sat, 08 Feb 2020 22:17:29 +0000. Up 12.86 seconds.
Loaded plugins: extras_suggestions, langpacks, priorities, update-motd


 One of the configured repositories failed (Unknown),
 and yum doesn't have enough cached data to continue. At this point the only
 safe thing yum can do is fail. There are a few ways to work &quot;fix&quot; this:

     1. Contact the upstream for the repository and get them to fix the problem.

     2. Reconfigure the baseurl/etc. for the repository, to point to a working
        upstream. This is most often useful if you are using a newer
        distribution release than is supported by the repository (and the
        packages for the previous distribution release still work).

     3. Run the command with the repository temporarily disabled
            yum --disablerepo=&lt;repoid&gt; ...

     4. Disable the repository permanently, so yum won't use it by default. Yum
        will then just ignore the repository until you permanently enable it
        again or use --enablerepo for temporary usage:

            yum-config-manager --disable &lt;repoid&gt;
        or
            subscription-manager repos --disable=&lt;repoid&gt;

     5. Configure the failing repository to be skipped, if it is unavailable.
        Note that yum will try to contact the repo. when it runs most commands,
        so will have to try and fail each time (and thus. yum will be be much
        slower). If it is a very temporary problem though, this is often a nice
        compromise:

            yum-config-manager --save --setopt=&lt;repoid&gt;.skip_if_unavailable=true

Cannot find a valid baseurl for repo: amzn2-core/2/x86_64
Could not retrieve mirrorlist http://amazonlinux.us-east-1.amazonaws.com/2/core/latest/x86_64/mirror.list error was
12: Timeout on http://amazonlinux.us-east-1.amazonaws.com/2/core/latest/x86_64/mirror.list: (28, 'Connection timed out after 5000 milliseconds')
Feb 08 22:20:14 cloud-init[3215]: util.py[WARNING]: Package upgrade failed
Feb 08 22:20:14 cloud-init[3215]: cc_package_update_upgrade_install.py[WARNING]: 1 failed with exceptions, re-raising the last one
Feb 08 22:20:14 cloud-init[3215]: util.py[WARNING]: Running module package-update-upgrade-install (&lt;module 'cloudinit.config.cc_package_update_upgrade_install' from '/usr/lib/python2.7/site-packages/cloudinit/config/cc_package_update_upgrade_install.pyc'&gt;) failed
Cloud-init v. 18.5-2.amzn2 running 'modules:final' at Sat, 08 Feb 2020 22:20:15 +0000. Up 178.44 seconds.
Cloud-init v. 18.5-2.amzn2 finished at Sat, 08 Feb 2020 22:20:15 +0000. Datasource DataSourceEc2.  Up 178.62 seconds
(END)
</code></pre><p>Looks like yum couldn&rsquo;t install httpd because it couldn&rsquo;t find a valid baseurl?  Is yum corrupt?  Is my ami jacked?</p>
<p>So let&rsquo;s just try to install apache now.  Try being the keyword here because as it turns out we can&rsquo;t reach any repo or any webs.</p>
<p>Remember, a vpc needs an internet gateway.  An internet gateway needs a route table.  A route table needs a route, more specifically a default route.  When you create a route table the only route included is the local route for the cidr block of your vpc, well that doesn&rsquo;t do you any good for any hosts outside of that private subnet.  You still need a default route of 0.0.0.0/0 pointing to the internet gateway.  Attention to detail bro&hellip;</p>
<p><img src="/images/vpc-route-table-default-route.png" alt="default route"></p>
]]></content>
        </item>
        
        <item>
            <title>pscp and psftp are your friends</title>
            <link>https://troyhamilton.cloud/posts/2020/01/pscp-and-psftp-are-your-friends/</link>
            <pubDate>Sat, 25 Jan 2020 07:54:43 -0500</pubDate>
            
            <guid>https://troyhamilton.cloud/posts/2020/01/pscp-and-psftp-are-your-friends/</guid>
            <description>As magical as Hugo is, I couldn&amp;rsquo;t get the github deployment to work cleanly no matter how much I followed the official deployment guide on Windows 10 1809. When adding the submodule for the blog repo, this error kept pestering me:
&#39;public&#39; does not have a commit checked out All google-fu points to git v2.25.0.windows.1 and hugo extended v0.63.2 not being happy with each other. Luckily I have a CentOS vm that I&amp;rsquo;ve been using for my RHCSA labs and deploying my hugo blog to github ran clean with no errors.</description>
            <content type="html"><![CDATA[<p>As magical as Hugo is, I couldn&rsquo;t get the github deployment to work cleanly no matter how much I followed the official deployment guide on Windows 10 1809.  When adding the submodule for the blog repo, this error kept pestering me:</p>
<pre><code>'public' does not have a commit checked out
</code></pre><p>All google-fu points to git v2.25.0.windows.1 and hugo extended v0.63.2 not being happy with each other.  Luckily I have a CentOS vm that I&rsquo;ve been using for my RHCSA labs and deploying my hugo blog to github ran clean with no errors.  I didn&rsquo;t really want to retype some of the posts that I had in draft and there doesn&rsquo;t appear to be native clipboard support in Hyper-V.</p>
<p>puTTy and friends to the rescue!  Put your reading glasses on and have a gander <a href="https://www.putty.org">here</a>.  If you&rsquo;re on Windows and install the full package, two of the hidden treasures in the puTTy box are pscp and psftp.  They do have some slight differences in syntax and I&rsquo;ve read in some places that only psftp supports SSLv2 but after running some Wireshark and tcpdump captures it looks like both of them do.  I prefer psftp but there are use cases for both.  With either utility, I&rsquo;ll assume that you&rsquo;re already added root path of the binaries to your %PATH% environment variable,  otherwise just navigate to them.  If in doubt, echo %PATH%.</p>
<p>This is a very, very small and scaled down list of the commands available for both, for a comprehensive list check out <a href="https://ssh.com/ssh/putty/putty-manual/0.68/index.html">this cool guide</a> at ssh.com.  Props to the team that put together the documentation.</p>
<hr>
<h1 id="psftp">PSFTP</h1>
<ul>
<li>Connect to the host.  This will drop you into a <strong>psftp&gt;</strong> prompt</li>
</ul>
<pre><code>psftp user@host
</code></pre><ul>
<li>Print remote directory</li>
</ul>
<pre><code>pwd
Current directory is /home/user
</code></pre><ul>
<li>Print local directory</li>
</ul>
<pre><code>lpwd
Current local directory is C:\users\user\Documents
</code></pre><ul>
<li>Change remote directory</li>
</ul>
<pre><code>cd /usr/local/bin
Remote directory is now /usr/local/bin
</code></pre><ul>
<li>List remote directory</li>
</ul>
<pre><code>ls
List direcotory /usr/local/bin
</code></pre><ul>
<li>Copy a file from local to remote</li>
</ul>
<pre><code>put file
local:file =&gt;remote:/usr/local/bin/file
</code></pre><ul>
<li>Copy a file from remote to local</li>
</ul>
<pre><code>get file
remote:/usr/local/bin/file =&gt; local:file
</code></pre><ul>
<li>Exit psftp</li>
</ul>
<pre><code>quit or exit
</code></pre><h1 id="pscp">PSCP</h1>
<p>PSCP doesn&rsquo;t offer as much flare but in the end it can git&rsquo;r done.  If in doubt use psftp.  By default pscp will only copy files so use the -r flag for recursive operations.</p>
<ul>
<li>Copy a single file from local to remote</li>
</ul>
<pre><code>pscp \path\to\local\file user@remote:/path/to/remote/dir
</code></pre><ul>
<li>Copy multiple files from local to remote</li>
</ul>
<pre><code>pscp \path\to\local\files\*.extension user@remote:/path/to/remote/dir
</code></pre><ul>
<li>Copy a single file from remote to local</li>
</ul>
<pre><code>pscp user@remote:/path/to/remote/dir/file path\to\local\dir
</code></pre><ul>
<li>List remote files</li>
</ul>
<pre><code>pscp -ls user@remote:/dir
</code></pre>]]></content>
        </item>
        
        <item>
            <title>All the hugs for Hugo</title>
            <link>https://troyhamilton.cloud/posts/2020/01/all-the-hugs-for-hugo/</link>
            <pubDate>Sat, 18 Jan 2020 13:52:23 -0500</pubDate>
            
            <guid>https://troyhamilton.cloud/posts/2020/01/all-the-hugs-for-hugo/</guid>
            <description>I am not a front end developer&amp;hellip;
14 years in IT, I regret not learning more html/css/js. That negligence has brought me to this point.
There&amp;rsquo;s a big difference between working with html files hosted in a load balanced IIS cluster versus building a site from scratch, tweaking it, making it look good, etc.
Before Hugo I tried:
 Rolling my own with html 5 and css 3 - Way harder than it sounds [fail] Gatsby.</description>
            <content type="html"><![CDATA[<p>I am not a front end developer&hellip;</p>
<p>14 years in IT, I regret not learning more html/css/js.  That negligence has brought me to this point.</p>
<p>There&rsquo;s a big difference between working with html files hosted in a load balanced IIS cluster versus building a site from scratch, tweaking it, making it look good, etc.</p>
<p>Before Hugo I tried:</p>
<ul>
<li>Rolling my own with html 5 and css 3 - Way harder than it sounds [fail]</li>
<li>Gatsby.JS - Kinda need to know how to use Node.js, React, and GraphQL effectively which I don&rsquo;t [fail]</li>
<li>Pelican - Like the concept but the workflow was too destructive for me [fail]</li>
<li>MkDocs - Useful for documentation sites, not useful for blogging [fail]</li>
<li>Jekyll - Didn&rsquo;t want to go down the Ruby rabbit hole just yet [fail]</li>
</ul>
<p>I really wanted to make it work with Pelican and MkDocs since they&rsquo;re powered by Python which is a very powerful language.  But when your bottleneck is preventing you from moving forward, it&rsquo;s just time to move on.  Why Python?  Because DevOps of course :)</p>
<h3 id="yay-for-hugo">Yay for Hugo!</h3>
<p>Seriously, with Hugo I&rsquo;m able to get a format and workflow that I really enjoy.  Having this boring simplicity is ideal for me because there&rsquo;s already so much in my full-stack brain that if I tried to cram in too much front end stuff I might go crazy.</p>
<p>I&rsquo;m going to keep this blog as simple as possible.  No ads, no disqus, no commenting, no bullshit.</p>
<p>Shout out to <a href="https://zwbetz.com/make-a-hugo-blog-from-scratch/">zwbetz</a> for providing a very easy to follow guide on getting up and running with Hugo quickly.  Cheers!</p>
]]></content>
        </item>
        
        <item>
            <title>Fun with AWS EC2 and puTTy</title>
            <link>https://troyhamilton.cloud/posts/2020/01/fun-with-aws-ec2-and-putty/</link>
            <pubDate>Sat, 11 Jan 2020 13:52:16 -0500</pubDate>
            
            <guid>https://troyhamilton.cloud/posts/2020/01/fun-with-aws-ec2-and-putty/</guid>
            <description>In preparation for SAA-C01 I wanted to start looking into moving my site from Github+Netlify to EC2+S3+Jenkins. So I go to ssh into my free-tier instance from PuTTy on win10 and I get:
No supported authentication methods available (server sent: publickey,gssapi-keyex,gssapi-with-mic Interesting, but ok, let&amp;rsquo;s see what&amp;rsquo;s wrong. So I login to aws console and verify my ec2 instance is running. The green dot means running right :). But we&amp;rsquo;re architects/engineers/sysops/devops so we do things in cli right?</description>
            <content type="html"><![CDATA[<p>In preparation for SAA-C01 I wanted to start looking into moving my site from Github+Netlify to EC2+S3+Jenkins.  So I go to ssh into my free-tier instance from PuTTy on win10 and I get:</p>
<pre><code>No supported authentication methods available (server sent: publickey,gssapi-keyex,gssapi-with-mic
</code></pre><p>Interesting, but ok, let&rsquo;s see what&rsquo;s wrong.  So I login to aws console and verify my ec2 instance is running.  The green dot means running right :).  But we&rsquo;re architects/engineers/sysops/devops so we do things in cli right?</p>
<pre><code>aws ec2 describe-instance-status
</code></pre><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json">{     <span style="color:#f92672">&#34;InstanceStatuses&#34;</span>: [
        {
            <span style="color:#f92672">&#34;AvailabilityZone&#34;</span>: <span style="color:#e6db74">&#34;us-east-1c&#34;</span>,
            <span style="color:#f92672">&#34;InstanceId&#34;</span>: <span style="color:#e6db74">&#34;i-0x0x0x0x0x0x&#34;</span>,
            <span style="color:#f92672">&#34;InstanceState&#34;</span>: {
                <span style="color:#f92672">&#34;Code&#34;</span>: <span style="color:#ae81ff">16</span>,
                <span style="color:#f92672">&#34;Name&#34;</span>: <span style="color:#e6db74">&#34;running&#34;</span>
            },
            <span style="color:#f92672">&#34;InstanceStatus&#34;</span>: {
                <span style="color:#f92672">&#34;Details&#34;</span>: [                     {
                        <span style="color:#f92672">&#34;Name&#34;</span>: <span style="color:#e6db74">&#34;reachability&#34;</span>,
                        <span style="color:#f92672">&#34;Status&#34;</span>: <span style="color:#e6db74">&#34;passed&#34;</span>
                    }
                ],                 <span style="color:#f92672">&#34;Status&#34;</span>: <span style="color:#e6db74">&#34;ok&#34;</span>
            },
            <span style="color:#f92672">&#34;SystemStatus&#34;</span>: {
                <span style="color:#f92672">&#34;Details&#34;</span>: [                     {
                        <span style="color:#f92672">&#34;Name&#34;</span>: <span style="color:#e6db74">&#34;reachability&#34;</span>,
                        <span style="color:#f92672">&#34;Status&#34;</span>: <span style="color:#e6db74">&#34;passed&#34;</span>
                    }
                ],                 <span style="color:#f92672">&#34;Status&#34;</span>: <span style="color:#e6db74">&#34;ok&#34;</span>
            }
        }
    ]
}
</code></pre></div><p>Looks right to me.  Let&rsquo;s verify the security group after checking our local public ip using this powershell script:</p>
<pre><code>Invoke-RestMethod https://ipinfo.io/ip
</code></pre><p>First check what security group is applied to the instance:</p>
<pre><code>aws ec2 describe-instances
</code></pre><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json"><span style="color:#e6db74">&#34;SecurityGroups&#34;</span><span style="color:#960050;background-color:#1e0010">:</span> [ 		{
			<span style="color:#f92672">&#34;GroupName&#34;</span>: <span style="color:#e6db74">&#34;launch-wizard-2&#34;</span>,
			<span style="color:#f92672">&#34;GroupId&#34;</span>: <span style="color:#e6db74">&#34;sg-0x0x0x0x0x0x0x&#34;</span>
		}
	]
</code></pre></div><p>Cool, let&rsquo;s check out the security group inbound rules:</p>
<pre><code>aws ec2 describe-security-groups
</code></pre><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json">{ 	<span style="color:#f92672">&#34;FromPort&#34;</span>: <span style="color:#ae81ff">22</span>,
	<span style="color:#f92672">&#34;IpProtocol&#34;</span>: <span style="color:#e6db74">&#34;tcp&#34;</span>,
	<span style="color:#f92672">&#34;IpRanges&#34;</span>: [ 		{
			<span style="color:#f92672">&#34;CidrIp&#34;</span>: <span style="color:#e6db74">&#34;my.public.ip.here/32&#34;</span>
		}
	], 	<span style="color:#f92672">&#34;Ipv6Ranges&#34;</span>: [],
	<span style="color:#f92672">&#34;PrefixListIds&#34;</span>: [],
	<span style="color:#f92672">&#34;ToPort&#34;</span>: <span style="color:#ae81ff">22</span>,
	<span style="color:#f92672">&#34;UserIdGroupPairs&#34;</span>: []
}
</code></pre></div><p>Looks right to me there too.  So wtf?  Since this isn&rsquo;t a production box and I don&rsquo;t have anything critical on it, let&rsquo;s just reboot the box.  I know, I know, this shouldn&rsquo;t be the answer but for the sake of learning that&rsquo;s what we&rsquo;re going with.</p>
<pre><code>aws ec2 stop-instances --instance-ids i-0x0x0x0x0x
</code></pre><pre><code>aws ec2 start-instances --instance-ids i-0x0x0x0x0x
</code></pre><p>After the box boots up, let&rsquo;s try to ssh again&hellip; but wait!  Remember, ALWAYS CHECK THE PHYSICAL LAYER!!!  I load the session in putty and what do I see?  ec2-user;@publicdns.  A freaking semicolon after ec2-user!  Seriously I have no idea how that got there.  I delete the semicolon and I ssh to the instance right away.  Gggrrr!</p>
<p>Long story short, always check the physical layer.  I use the term physical layer loosely, in this scenario it&rsquo;s putty and the session hostname.</p>
]]></content>
        </item>
        
        <item>
            <title>A world of hellos</title>
            <link>https://troyhamilton.cloud/posts/2020/01/a-world-of-hellos/</link>
            <pubDate>Wed, 01 Jan 2020 01:54:43 -0500</pubDate>
            
            <guid>https://troyhamilton.cloud/posts/2020/01/a-world-of-hellos/</guid>
            <description>Step 1. Introduce yourself Hi! I&amp;rsquo;m Troy.
Step 2. Say something about yourself Something about yourself
Step 3. Tell a joke Q: Where do astronauts like to get a drink?
A: At the space bar. #dadjokes</description>
            <content type="html"><![CDATA[<h3 id="step-1-introduce-yourself">Step 1. Introduce yourself</h3>
<p>Hi!  I&rsquo;m Troy.</p>
<h3 id="step-2-say-something-about-yourself">Step 2. Say something about yourself</h3>
<p><em>Something about yourself</em></p>
<h3 id="step-3--tell-a-joke">Step 3.  Tell a joke</h3>
<p>Q: Where do astronauts like to get a drink?</p>
<p>A: At the <em>space bar</em>. #dadjokes</p>
]]></content>
        </item>
        
    </channel>
</rss>
